import { useState } from 'react';
import SetRowsColumns from '@/Components/SetRowsColumns';
import MatrixRepresentation from '@/Components/MatrixRepresentation';
import { useCopiedArray } from '@/Lib/StorageContext';
import Head from 'next/head'
import {toast} from 'react-hot-toast';

export default function Transpose(){
    const [ rows, setRows ] = useState(2);
    const [ cols, setCols ] = useState(2);
    const [twoDArray, setTwoDArray] = useState([]);

    const [ transpose, setTranspose ] = useState( undefined );

    const onChangeForTranspose = () => {
        setTranspose( undefined );
    }

    function transposeMatrix(matrix) {
        const n = matrix.length;
    
        // Create an empty matrix of size n x n for the transpose
        const transpose = new Array(n).fill(0).map(() => new Array(n).fill(0));
    
        // Compute the transpose
        for (let i = 0; i < n; i++) {
            for (let j = 0; j < n; j++) {
                transpose[j][i] = matrix[i][j];
            }
        }
    
        return transpose;
    }
    function deepCopy(arr) {
        return arr.map(row => [...row]);
    }
    const findTranspose = () => {
        const arr = deepCopy( twoDArray );
        setTranspose(transposeMatrix( arr ));
    }

    const { copiedArray, copiedRowsCount, copiedColsCount } = useCopiedArray();
    const PasteArray = (rowsRef, colsRef) => {
        if( copiedArray != null ) {
            if ( copiedRowsCount !== copiedColsCount ) {
                toast.error('Rows and Cols should be equal!');
                return;
            }
            toast.success('Copied Matrix Pasted!');
            setRows( copiedRowsCount );
            setCols( copiedColsCount );
            setTwoDArray( copiedArray );
            rowsRef.current.value = copiedRowsCount;
            colsRef.current.value = copiedColsCount;
        }else {
            toast.error('No Matrix Copied From Site!');
        }
    };
    return(
        <>
        <Head>
            <title>Transpose</title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="icon" href="/favicon.ico" />
        </Head>
        <div className='h-100 col-lg-11 col-md-12  pt-3' style={{overflowY:'scroll'}} >
            <h3 className='fst-italic d-inline-block text-dark mx-5 bg-light display-5'>Matrix Transpose: </h3>

            <div className='d-flex flex-wrap'>
                <div className='col-md-6 p-md-2 p-3'>
                    <SetRowsColumns pasteArray={PasteArray} onChange={onChangeForTranspose} setColumns={setCols} setRows={setRows} />
                    { 
                        rows && cols ?
                        <MatrixRepresentation onChange={onChangeForTranspose}  rowsCount={rows} colsCount={cols} twoDArray={twoDArray} setTwoDArray={setTwoDArray} />
                        :
                        <></>
                    }
                </div>
            </div>

            <div className='d-flex flex-wrap p-md-2 p-3'>
                <div>
                {
                    rows && cols ?
                    <button onClick={()=> findTranspose() } className="btn btn-primary m-4">
                        Calculate Transpose
                    </button>
                    :<></>
                }
                </div>
                <div >
                    <div className='fst-italic text-dark bg-light p-2 h5'>Result: </div>
                    {
                        typeof transpose !== 'undefined' && rows && cols  ?
                        <MatrixRepresentation editable={false} rowsCount={rows} colsCount={cols} twoDArray={transpose}  />
                        :
                        <></>
                    }
                </div>
            </div>
        </div>
        </>
    );
}